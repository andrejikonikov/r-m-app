{"version":3,"sources":["Queries/Characters.js","Components/Character.jsx","Components/List.jsx","Components/Page.jsx","App.js","reportWebVitals.js","index.js"],"names":["GET_CHARACTERS","gql","Character","name","image","status","species","gender","ListItem","alignItems","ListItemAvatar","Avatar","alt","src","ListItemText","primary","Chip","label","Divider","ListView","useState","currentPage","setPage","useQuery","variables","page","loading","error","data","characters","info","results","next","pages","Box","top","left","bottom","right","position","display","justifyContent","CircularProgress","severity","className","List","map","character","Pagination","count","onChange","event","value","Page","Container","fixed","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wkBAEA,IAoBeA,EApBQC,cAAH,K,0FCgCLC,MAzBf,YAMI,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,MACAC,EAGC,EAHDA,OACAC,EAEC,EAFDA,QACAC,EACC,EADDA,OAEA,OACE,eAAC,WAAD,WACE,eAACC,EAAA,EAAD,CAAUC,WAAW,aAArB,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,IAAKT,EAAMU,IAAKT,MAE1B,cAACU,EAAA,EAAD,CACEC,QAASZ,IAEX,cAACa,EAAA,EAAD,CAAMC,MAAOZ,IACb,cAACW,EAAA,EAAD,CAAMC,MAAOX,IACb,cAACU,EAAA,EAAD,CAAMC,MAAOV,OAEf,cAACW,EAAA,EAAD,MAZaf,ICiDJgB,MAvDf,WAAqB,IAAD,EACaC,mBAAS,GADtB,mBACXC,EADW,KACEC,EADF,OAGeC,mBAASvB,EAAgB,CACxDwB,UAAW,CAAEC,KAAMJ,KADbK,EAHU,EAGVA,QAASC,EAHC,EAGDA,MAHC,KAGMC,MASZ,CAAEC,WAAY,CAAEC,KAAM,GAAIC,QAAS,MAJ7CF,WACEC,EATc,EASdA,KACAC,EAVc,EAUdA,QAIIC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAEd,OAAIP,EAEA,cAACQ,EAAA,EAAD,CACEC,IAAK,EACLC,KAAM,EACNC,OAAQ,EACRC,MAAO,EACPC,SAAS,WACTC,QAAQ,OACR/B,WAAW,SACXgC,eAAe,SARjB,SAUE,cAACC,EAAA,EAAD,MAKFf,EAEA,mBAAGgB,SAAS,QAAZ,8CAKF,sBAAKC,UAAU,OAAf,UACE,cAACC,EAAA,EAAD,UACGd,EAAQe,KAAI,SAACC,GAAD,OAAe,cAAC,EAAD,eAAeA,SAE7C,cAACC,EAAA,EAAD,CACEC,MAAOhB,EACPR,KAAMO,EAAO,EACbkB,SAAU,SAACC,EAAOC,GAChB9B,EAAQ8B,UC9CHC,MARf,WACE,OACE,cAACC,EAAA,EAAD,CAAWC,OAAK,EAAhB,SACE,cAAC,EAAD,OCESC,MARf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,cAAC,EAAD,OCOSa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGRQ,EAAS,IAAIC,eAAa,CAC9BC,IAAK,sCACLC,MAAO,IAAIC,kBAGbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,iBAAD,CAAgBP,OAAQA,EAAxB,SACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,SAM1BlB,K","file":"static/js/main.dc65ed0c.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nconst GET_CHARACTERS = gql`\n  query Characters($page:Int, $filter: FilterCharacter) {\n    characters(page:$page, filter:$filter) {\n      info{\n        count,\n        pages,\n        next,\n        prev,\n      }\n      results{\n        name\n        image\n        status,\n        species,\n        gender,\n      }\n    }\n  }\n`;\n\nexport default GET_CHARACTERS\n","import React, { Fragment } from 'react'\n\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\n\nfunction Character({\n  name,\n  image,\n  status,\n  species,\n  gender,\n}) {\n  return (\n    <Fragment key={name}>\n      <ListItem alignItems=\"flex-start\">\n        <ListItemAvatar>\n          <Avatar alt={name} src={image} />\n        </ListItemAvatar>\n        <ListItemText\n          primary={name}\n        />\n        <Chip label={status} />\n        <Chip label={species} />\n        <Chip label={gender} />\n      </ListItem>\n      <Divider />\n    </Fragment>\n  )\n}\n\nexport default Character\n","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport GET_CHARACTERS from '../Queries/Characters'\n\nimport List from '@material-ui/core/List'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Pagination from '@material-ui/lab/Pagination'\nimport Box from '@material-ui/core/Box'\n\nimport Character from './Character'\n\nfunction ListView() {\n  const [currentPage, setPage] = useState(1)\n\n  const { loading, error, data } = useQuery(GET_CHARACTERS, {\n    variables: { page: currentPage },\n  })\n\n  const {\n    characters: {\n      info,\n      results,\n    },\n  } = data || { characters: { info: {}, results: []} }\n\n  const { next, pages } = info\n\n  if (loading) {\n    return (\n      <Box\n        top={0}\n        left={0}\n        bottom={0}\n        right={0}\n        position=\"absolute\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <CircularProgress />\n      </Box>\n      )\n  }\n\n  if (error) {\n    return (\n      <p severity=\"error\">Something went wrong, try later.</p>\n    )\n  }\n\n  return (\n    <div className=\"List\">\n      <List>\n        {results.map((character) => <Character {...character} />)}\n      </List>\n      <Pagination\n        count={pages}\n        page={next - 1}\n        onChange={(event, value) => {\n          setPage(value)\n        }}\n      />\n    </div>\n  )\n}\n\nexport default ListView\n","import React from 'react'\nimport Container from '@material-ui/core/Container'\n\nimport List from './List'\n\nfunction Page() {\n  return (\n    <Container fixed>\n      <List />\n    </Container>\n  )\n}\n\nexport default Page\n","import Page from './Components/Page'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Page />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://rickandmortyapi.com/graphql',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}