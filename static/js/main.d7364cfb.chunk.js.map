{"version":3,"sources":["Components/Shared/Page.jsx","Components/Queries/Characters.js","Components/Shared/LoadingView.jsx","Components/Shared/ErrorMessage.jsx","Components/Characters/Components/CharacterItem.jsx","Components/Characters/Components/List.jsx","Components/Characters/Characters.jsx","Components/Queries/Character.js","Components/Character/Components/CharacterCard.jsx","Components/Character/Character.jsx","Components/Home/Home.jsx","App.js","reportWebVitals.js","index.js"],"names":["Page","children","Container","fixed","GET_CHARACTERS","gql","LoadingView","Box","top","left","bottom","right","position","display","alignItems","justifyContent","CircularProgress","CharacterItem","id","name","image","status","species","gender","to","ListItem","ListItemAvatar","Avatar","alt","src","ListItemText","primary","Chip","label","Divider","ListView","useState","currentPage","setPage","useQuery","variables","page","loading","error","data","characters","info","results","next","pages","ErrorMessage","className","List","map","rest","Pagination","count","onChange","event","value","Characters","GET_CHARACTER","useStyles","makeStyles","root","maxWidth","media","height","CharacterCard","classes","Card","CardActionArea","CardMedia","title","CardContent","Typography","gutterBottom","variant","component","match","params","character","Home","Button","App","path","render","props","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d7364cfb.chunk.js","sourcesContent":["import React from 'react'\nimport Container from '@material-ui/core/Container'\n\nfunction Page({ children }) {\n  return (\n    <Container fixed>\n      {children}\n    </Container>\n  )\n}\n\nexport default Page\n","import { gql } from '@apollo/client';\n\nconst GET_CHARACTERS = gql`\n  query Characters($page: Int, $filter: FilterCharacter) {\n    characters(page: $page, filter: $filter) {\n      info {\n        count\n        pages\n        next\n        prev\n      }\n      results {\n        id\n        name\n        image\n        status\n        species\n        gender\n      }\n    }\n  }\n`\n\nexport default GET_CHARACTERS\n","import React from 'react'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Box from '@material-ui/core/Box'\n\nfunction LoadingView() {\n  return (\n    <Box\n      top={0}\n      left={0}\n      bottom={0}\n      right={0}\n      position=\"absolute\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <CircularProgress />\n    </Box>\n  )\n}\n\nexport default LoadingView\n","import React from 'react'\nimport Box from '@material-ui/core/Box'\n\nfunction LoadingView() {\n  return (\n    <Box\n      top={0}\n      left={0}\n      bottom={0}\n      right={0}\n      position=\"absolute\"\n      display=\"flex\"\n      alignItems=\"center\"\n      justifyContent=\"center\"\n    >\n      <p>Something went wrong, try later.</p>\n    </Box>\n  )\n}\n\nexport default LoadingView\n","import React from 'react'\nimport { Link } from \"react-router-dom\"\n\nimport ListItem from '@material-ui/core/ListItem'\nimport Divider from '@material-ui/core/Divider'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\nimport Avatar from '@material-ui/core/Avatar'\nimport Chip from '@material-ui/core/Chip'\n\nfunction CharacterItem({\n  id,\n  name,\n  image,\n  status,\n  species,\n  gender,\n}) {\n  return (\n    <Link key={name} to={`/characters/${id}`}>\n      <ListItem alignItems=\"flex-start\">\n        <ListItemAvatar>\n          <Avatar alt={name} src={image} />\n        </ListItemAvatar>\n        <ListItemText\n          primary={name}\n        />\n        <Chip label={status} />\n        <Chip label={species} />\n        <Chip label={gender} />\n      </ListItem>\n      <Divider />\n    </Link>\n  )\n}\n\nexport default CharacterItem\n","import React, { useState } from 'react'\nimport { useQuery } from '@apollo/client'\nimport List from '@material-ui/core/List'\nimport Pagination from '@material-ui/lab/Pagination'\n\nimport GET_CHARACTERS from '../../Queries/Characters'\nimport LoadingView from '../../Shared/LoadingView'\nimport ErrorMessage from '../../Shared/ErrorMessage'\nimport Character from './CharacterItem'\n\nfunction ListView() {\n  const [currentPage, setPage] = useState(1)\n\n  const { loading, error, data } = useQuery(GET_CHARACTERS, {\n    variables: { page: currentPage },\n  })\n\n  const {\n    characters: {\n      info,\n      results,\n    },\n  } = data || { characters: { info: {}, results: []} }\n\n  const { next, pages } = info\n\n  if (loading) {\n    return ( <LoadingView /> )\n  }\n\n  if (error) {\n    return ( <ErrorMessage /> )\n  }\n\n  return (\n    <div className=\"List\">\n      <List>\n        {results.map(({ id, ...rest }) => <Character key={id} id={id} {...rest} />)}\n      </List>\n      <Pagination\n        count={pages}\n        page={next - 1}\n        onChange={(event, value) => {\n          setPage(value)\n        }}\n      />\n    </div>\n  )\n}\n\nexport default ListView\n","import React from 'react'\n\nimport Page from '../Shared/Page'\n\nimport List from './Components/List'\n\nfunction Characters() {\n  return (\n    <Page>\n      <List />\n    </Page>\n  )\n}\n\nexport default Characters\n","import { gql } from '@apollo/client';\n\nconst GET_CHARACTER = gql`\n  query Character($id: ID!) {\n    character(id: $id) {\n      id\n      name\n      image\n      status\n      species\n      gender\n    }\n  }\n`\n\nexport default GET_CHARACTER\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardActionArea from '@material-ui/core/CardActionArea'\nimport CardContent from '@material-ui/core/CardContent'\nimport CardMedia from '@material-ui/core/CardMedia'\nimport Typography from '@material-ui/core/Typography'\nimport Chip from '@material-ui/core/Chip'\n\n\nconst useStyles = makeStyles({\n  root: {\n    maxWidth: 345,\n  },\n  media: {\n    height: 140,\n  },\n})\n\nfunction CharacterCard({\n  id,\n  name,\n  image,\n  status,\n  species,\n  gender,\n}) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardMedia\n          className={classes.media}\n          image={image}\n          title={name}\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {name}\n          </Typography>\n          <Chip label={status} />\n          <Chip label={species} />\n          <Chip label={gender} />\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  )\n}\n\nexport default CharacterCard\n","import React from 'react'\nimport { useQuery } from '@apollo/client'\nimport Box from '@material-ui/core/Box'\n\nimport GET_CHARACTER from '../Queries/Character'\n\nimport Page from '../Shared/Page'\nimport LoadingView from '../Shared/LoadingView'\nimport ErrorMessage from '../Shared/ErrorMessage'\n\nimport CharacterCard from './Components/CharacterCard'\n\nfunction Characters({ match }) {\n  const { loading, error, data } = useQuery(GET_CHARACTER, {\n    variables: { id: match.params.id },\n  })\n\n  if (loading) {\n    return ( <LoadingView /> )\n  }\n\n  if (error) {\n    return ( <ErrorMessage /> )\n  }\n\n  const { character } = data || { character: {} }\n\n  return (\n    <Page>\n      <Box\n        top={0}\n        left={0}\n        bottom={0}\n        right={0}\n        position=\"absolute\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <CharacterCard {...character} />\n      </Box>\n    </Page>\n  )\n}\n\nexport default Characters\n","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Button from '@material-ui/core/Button';\nimport Box from '@material-ui/core/Box'\n\nimport Page from '../Shared/Page'\n\nfunction Home() {\n  return (\n    <Page>\n      <Box\n        top={0}\n        left={0}\n        bottom={0}\n        right={0}\n        position=\"absolute\"\n        display=\"flex\"\n        alignItems=\"center\"\n        justifyContent=\"center\"\n      >\n        <Link to=\"/characters\">\n          <Button variant=\"contained\">Click to see characters</Button>\n        </Link>\n      </Box>\n    </Page>\n  )\n}\n\nexport default Home\n","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from \"react-router-dom\"\n\nimport Characters from './Components/Characters/Characters'\nimport Character from './Components/Character/Character'\nimport Home from './Components/Home/Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route\n            path=\"/characters/:id\"\n            render={(props) => <Character {...props} />}\n          />\n          <Route path=\"/characters\">\n            <Characters />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://rickandmortyapi.com/graphql',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}