{"version":3,"sources":["Queries/Characters.js","Components/List.jsx","App.js","reportWebVitals.js","index.js"],"names":["GET_CHARACTERS","gql","ListView","useQuery","variables","page","loading","error","results","data","characters","CircularProgress","severity","className","List","map","character","name","image","status","species","gender","ListItem","alignItems","ListItemAvatar","Avatar","alt","src","ListItemText","primary","Chip","label","Divider","renderItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+lBAEA,IAoBeA,EApBQC,cAAH,K,wEC8DLC,MAnDf,WAAqB,IAAD,EACeC,mBAASH,EAAgB,CACxDI,UAAW,CAAEC,KAAM,KADbC,EADU,EACVA,QAASC,EADC,EACDA,MA6BKC,GA9BJ,EACMC,MA6BoB,CAAEC,WAAY,CAAEF,QAAS,MAA7DE,WAAcF,QAEtB,OAAIF,EACM,cAACK,EAAA,EAAD,IAGNJ,EAEA,mBAAGK,SAAS,QAAZ,8CAKF,qBAAKC,UAAU,OAAf,SACE,cAACC,EAAA,EAAD,UACGN,EAAQO,KAAI,SAACC,GAAD,OAxCnB,YAMI,IALFC,EAKC,EALDA,KACAC,EAIC,EAJDA,MACAC,EAGC,EAHDA,OACAC,EAEC,EAFDA,QACAC,EACC,EADDA,OAEA,OACE,eAAC,WAAD,WACE,eAACC,EAAA,EAAD,CAAUC,WAAW,aAArB,UACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,IAAKT,EAAMU,IAAKT,MAE1B,cAACU,EAAA,EAAD,CACEC,QAASZ,IAEX,cAACa,EAAA,EAAD,CAAMC,MAAOZ,IACb,cAACW,EAAA,EAAD,CAAMC,MAAOX,IACb,cAACU,EAAA,EAAD,CAAMC,MAAOV,OAEf,cAACW,EAAA,EAAD,OAoB4BC,CAAWjB,WC9ChCkB,MARf,WACE,OACE,qBAAKrB,UAAU,MAAf,SACE,cAAC,EAAD,OCKSsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCGRQ,EAAS,IAAIC,eAAa,CAC9BC,IAAK,sCACLC,MAAO,IAAIC,kBAGbC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,iBAAD,CAAgBP,OAAQA,EAAxB,SACE,cAAC,EAAD,QAGJQ,SAASC,eAAe,SAM1BlB,M","file":"static/js/main.c8860d31.chunk.js","sourcesContent":["import { gql } from '@apollo/client';\n\nconst GET_CHARACTERS = gql`\n  query Characters($page:Int, $filter: FilterCharacter) {\n    characters(page:$page, filter:$filter) {\n      info{\n        count,\n        pages,\n        next,\n        prev,\n      }\n      results{\n        name\n        image\n        status,\n        species,\n        gender,\n      }\n    }\n  }\n`;\n\nexport default GET_CHARACTERS\n","import React, { Fragment } from 'react'\nimport { useQuery } from '@apollo/client'\nimport GET_CHARACTERS from '../Queries/Characters'\n\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Divider from '@material-ui/core/Divider';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport Chip from '@material-ui/core/Chip';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nfunction ListView() {\n  const { loading, error, data } = useQuery(GET_CHARACTERS, {\n    variables: { page: 1 },\n  });\n\n  function renderItem({\n    name,\n    image,\n    status,\n    species,\n    gender,\n  }) {\n    return (\n      <Fragment>\n        <ListItem alignItems=\"flex-start\">\n          <ListItemAvatar>\n            <Avatar alt={name} src={image} />\n          </ListItemAvatar>\n          <ListItemText\n            primary={name}\n          />\n          <Chip label={status} />\n          <Chip label={species} />\n          <Chip label={gender} />\n        </ListItem>\n        <Divider />\n      </Fragment>\n    )\n  }\n\n  const { characters: { results } } = data || { characters: { results: []} }\n\n  if (loading) {\n    return (<CircularProgress />)\n  }\n\n  if (error) {\n    return (\n      <p severity=\"error\">Something went wrong, try later.</p>\n    )\n  }\n\n  return (\n    <div className=\"List\">\n      <List>\n        {results.map((character) => renderItem(character))}\n      </List>\n    </div>\n  );\n}\n\nexport default ListView;\n","import './App.css';\n\nimport List from './Components/List'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <List />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from '@apollo/client';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport { ApolloClient, InMemoryCache } from '@apollo/client';\n\nconst client = new ApolloClient({\n  uri: 'https://rickandmortyapi.com/graphql',\n  cache: new InMemoryCache()\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}